<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 被代理类 目标类 -->
    <bean id="userDao" class="com.xgf.aop.aspectj.xml.UserDaoImpl"/>

    <!--切面类  干什么事情-->
    <bean id="myAspect" class="com.xgf.aop.aspectj.xml.MyAspect"/>


    <aop:config>
        <!--引入切面类  -->
        <aop:aspect ref="myAspect">
            <!-- 执行的方法  在什么地方   pointcut切点
               execution(返回值类型 包名.类名.方法名(参数))
                (..)代表任意参数
            -->
            <aop:pointcut id="mycut" expression="execution(* com.xgf.aop.aspectj.xml.*.*(..))"/>

            <!-- 切入时机 -->
            <!--前置通知  方法执行之前-->
            <aop:before method="before" pointcut-ref="mycut"/>

            <!--后置返回通知 方法执行之后执行,方法正常结束才调用，出现异常不会调用-->
            <aop:after-returning method="afterReturning" pointcut-ref="mycut"/>

            <!--环绕通知  -->
            <aop:around method="around" pointcut-ref="mycut"/>

            <!--异常通知-->
            <aop:after-throwing method="afterThrowing" pointcut-ref="mycut" throwing="e"/>

            <!-- 最终(返回)通知 不管方法是否出现异常都会执行，进行资源释放等清理工作 -->
            <aop:after method="after" pointcut-ref="mycut"/>
        </aop:aspect>

    </aop:config>




</beans>